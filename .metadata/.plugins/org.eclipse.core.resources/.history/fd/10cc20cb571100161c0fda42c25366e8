package com.aiss.omnidrive.server.resources;

import org.restlet.data.ChallengeResponse;
import org.restlet.data.ChallengeScheme;
import org.restlet.resource.ClientResource;

import com.aiss.omnidrive.shared.drive.files.DriveFile;
import com.aiss.omnidrive.shared.drive.files.DriveFilesList;
import com.aiss.omnidrive.shared.drive.user.DriveUserInfo;

public class DriveResource {

	private static final String BASE_URL = "https://www.googleapis.com/drive/v3";
	private static final String TYPE_TOKEN = "Bearer";

	public static DriveUserInfo getUserInfo(String token) {
		DriveUserInfo userInfo;
		ClientResource connection;
		ChallengeResponse authorization;

		connection = new ClientResource(BASE_URL + "/about");
		connection
				.addQueryParameter(
						"fields",
						"appInstalled,exportFormats,folderColorPalette,importFormats,kind,maxImportSizes,maxUploadSize,storageQuota,user");
		authorization = new ChallengeResponse(new ChallengeScheme("OAuth2",
				TYPE_TOKEN));
		authorization.setRawValue(token);
		connection.setChallengeResponse(authorization);

		userInfo = connection.get(DriveUserInfo.class);

		return userInfo;
	}

	public static DriveFilesList getFiles(String token, String parent) {
		DriveFilesList files;
		ClientResource connection;
		ChallengeResponse authorization;
		String q;

		q = "'" + parent + "' in parents and trashed = false";
		connection = new ClientResource(BASE_URL + "/files");
		connection.addQueryParameter("fields", "files,kind,nextPageToken");
		connection.addQueryParameter("q", q);
		connection.addQueryParameter("pageSize", "1000");
		authorization = new ChallengeResponse(new ChallengeScheme("OAuth2",
				TYPE_TOKEN));
		authorization.setRawValue(token);
		connection.setChallengeResponse(authorization);

		files = connection.get(DriveFilesList.class);

		return files;
	}

	public static DriveFile getFile(String token, String idFile) {
		DriveFile file;
		ClientResource connection;
		ChallengeResponse authorization;

		connection = new ClientResource(BASE_URL + "/files/" + idFile);
		connection.addQueryParameter("fields", "appProperties,capabilities,contentHints,createdTime,description,explicitlyTrashed,fileExtension,folderColorRgb,fullFileExtension,headRevisionId,iconLink,id,imageMediaMetadata,isAppAuthorized,kind,lastModifyingUser,md5Checksum,mimeType,modifiedByMeTime,modifiedTime,name,originalFilename,ownedByMe,owners,parents,permissions,properties,quotaBytesUsed,shared,sharedWithMeTime,sharingUser,size,spaces,starred,thumbnailLink,trashed,version,videoMediaMetadata,viewedByMe,viewedByMeTime,viewersCanCopyContent,webContentLink,webViewLink,writersCanShare");
		authorization = new ChallengeResponse(new ChallengeScheme("OAuth2",TYPE_TOKEN));
		authorization.setRawValue(token);
		connection.setChallengeResponse(authorization);

		file = connection.get(DriveFile.class);

		return file;
	}
	
	public static DriveFilesList downloadFile(String token, String idFile) {
		DriveFilesList files;
		ClientResource connection;
		ChallengeResponse authorization;
		String q;

		connection = new ClientResource(BASE_URL + "/files/" + idFile);
		connection.addQueryParameter("fields", "appProperties,capabilities,contentHints,createdTime,description,explicitlyTrashed,fileExtension,folderColorRgb,fullFileExtension,headRevisionId,iconLink,id,imageMediaMetadata,isAppAuthorized,kind,lastModifyingUser,md5Checksum,mimeType,modifiedByMeTime,modifiedTime,name,originalFilename,ownedByMe,owners,parents,permissions,properties,quotaBytesUsed,shared,sharedWithMeTime,sharingUser,size,spaces,starred,thumbnailLink,trashed,version,videoMediaMetadata,viewedByMe,viewedByMeTime,viewersCanCopyContent,webContentLink,webViewLink,writersCanShare");
		connection.addQueryParameter("pageSize", "1000");
		authorization = new ChallengeResponse(new ChallengeScheme("OAuth2",
				TYPE_TOKEN));
		authorization.setRawValue(token);
		connection.setChallengeResponse(authorization);

		files = connection.get(DriveFilesList.class);

		return files;
	}
}
